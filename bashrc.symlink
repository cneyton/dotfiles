# ~/.bashrc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac


# Certain non-interactive commands skip .profile.
# In this case the environment variables will be unavaible.
# Debian compile bash with the option to source ~/.bashrc for 
# non-interactive login.
# We use this feature to source environment variables here
if [ -n $DOTFILES ]; then
    . "$HOME/.dotfiles/env.sh"
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize


# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar


# Autocorrect typos in path names when using `cd`
shopt -s cdspell


# Do not autocomplete when accidentally pressing Tab on an empty line.
shopt -s no_empty_cmd_completion


# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ -r /usr/lib/git-core/git-sh-prompt ]; then
    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    . /usr/lib/git-core/git-sh-prompt
    git_prompt=yes
fi

__print_prompt()
{
    local reset="\e[0m"
    local bold="\e[1m"
    local italic="\e[3m"

    # terminal                | solarized
    local black="\e[30m"      # base02
    local red="\e[31m"        # red
    local green="\e[32m"      # green
    local yellow="\e[33m"     # yellow
    local blue="\e[34m"       # blue
    local magenta="\e[35m"    # magenta
    local cyan="\e[36m"       # cyan
    local white="\e[37m"      # base2

    local brblack="\e[90m"    # base03
    local brred="\e[91m"      # orange
    local brgreen="\e[92m"    # base01
    local bryellow="\e[93m"   # base00
    local brblue="\e[94m"     # base0
    local brmangenta="\e[95m" # violet
    local brcyan="\e[96m"     # base1
    local brwhite="\e[97m"    # base3

    if [ "$color_prompt" = yes ]; then
        PS1="\[${bold}\]\[${yellow}\]${debian_chroot:+($debian_chroot)}\u " # username
        PS1+="\[${reset}\]\[${white}\]at "
        PS1+="\[${bold}\]\[${yellow}\]\h"  # hostname
        PS1+="\[${reset}\]\[${white}\]:"
        PS1+="\[${bold}\]\[${blue}\]\w"    # working directory full path
        PS1+="\[${reset}\]\[${brwhite}\]"  # removing bold
        if [ -n "$git_prompt" ]; then
            PS1+="\$(__git_ps1 ' (%s)')"   # __git_ps1 output
        fi
        PS1+="\$ "
        PS1+="\[${reset}\]"
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
}

__print_prompt

unset color_prompt force_color_prompt git_prompt

# If this is an xterm set the title to wd
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "$(dircolors -b)"
fi

# aliases and functions
. "$DOTFILES/alias.sh"
. "$DOTFILES/function.sh"

# source local configuration
if [ -r ~/.localrc ]; then
    . ~/.localrc
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
